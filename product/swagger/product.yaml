openapi: 3.0.3
info:
  title: Ecomm - Product
  description: API to create, search, update and delete products and categories from the Product API
  version: 0.0.1
servers:
  - url: http://localhost:3000
    description: API Gateway
  - url: http://localhost:3002
    description: The service direct address(does not authenticate)
paths:
  /api/categories:
    get:
      summary: Search for Categories.
      description: Return all the existing categories.
      responses: 
        200: 
          description: Success!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Categories"
  /api/categories/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
    get:
      summary: Search for a specific category
      description: Return a specified category using its ID as a parameter
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        404:
          $ref: "#/components/responses/NotFound"
  /api/admin/categories:
    post:
      summary: Creates a new category
      security:
        - BearerAuth: []
      description: Receives a new category to save in the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Create-category"
      responses:
        201: 
          description: Category successfully created!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        401:
          $ref: "#/components/responses/Unauthorized"
  /api/admin/categories/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
    put:
      summary: Updates a category.
      security:
        - BearerAuth: []
      description: Updates a existing category.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Update-category"
      responses:
        200:
          description: Category successfully updated!
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    patch:
      summary: Activates a category
      security:
        - BearerAuth: []
      description: Activates a category status by turning it "true"
      responses:
        200:
          description: Category successfully activated!
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Deletes a category
      security:
        - BearerAuth: []
      description: Deletes a specific category using its ID as a parameter.
      responses:
        200:
          description: Category successfully deleted!
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
  /api/products:
    get:
      summary: Returns all existing products.
      description: Returns all existing products using queries or not.
      parameters:
        - name: maxPrice
          in: query
          description: The products max price
          schema: 
            type: number
        - name: minimumPrice
          in: query
          description: The products minimum price
          schema: 
            type: number
        - name: category
          in: query
          description: The products category
          schema: 
            type: number
        - name: minimumStockQuantity
          in: query
          description: Show products that have more stock quantity than the specified value
          schema: 
            type: number
      responses: 
        200: 
          description: Success!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
  /api/products/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
    get:
      summary: Searches a product by ID.
      description: Searches for a specific product using its ID as a parameter
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          $ref: "#/components/responses/NotFound"
  /api/admin/products:
    post:
      summary: Creates a new Product
      security:
        - BearerAuth: []
      description: Receives a new product and saves it in the database
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Create-product"
      responses: 
        201: 
          description: Product successfully created!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Create-product-response"
        401:
          $ref: "#/components/responses/Unauthorized"
  /api/admin/products/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
    put:
      summary: Updates a product
      security:
        - BearerAuth: []
      description: Updates a existing product
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Create-product"
      responses: 
        200: 
          description: Product successfully updated!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Create-product-response"
        400:
          description: Validation error
          content:
            application/json:
              schema: 
                $ref: "#/components/schemas/Product-validation-errors"
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Deletes a product
      security:
        - BearerAuth: []
      description: Deletes a product using its ID
      responses:
        204:
          description: Product successfully deleted!
        401:
          $ref: "#/components/responses/Unauthorized"
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: An error has ocurred
    Category:
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: 63eaea653f54b54de60123bc
            status:
              type: boolean
              example: false
        - $ref: "#/components/schemas/Create-category"
    Create-category:
      type: object
      properties:
        name:
          type: string
          example: MÓVEIS
    Update-category:
      type: object
      properties:
        name:
          type: string
          example: MÓVEIS
        status:
          type: boolean
          example: true
    Categories:
      type: array
      items:
        $ref: "#/components/schemas/Category"
    Product:
      type: object
      properties:
        _id:
          type: string
          example: 63eaea823f54b54de60123be
        name:
          type: string
          example: Capa Celular Samsung
        description:
          type: string
          example: Capa de celular Samsung A22
        slug:
          type: string
          example: capa-celular-samsung
        unitPrice:
          type: number
          example: 19.99
        stockQuantity:
          type: integer
          example: 100
        category:
          type: object
          properties:
            _id: 
              type: string
              example: 63eaea653f54b54de60123bc
            name: 
              type: string
              example: TESTE 2.0
            status: 
              type: string
              example: true
    Create-product:
      type: object
      properties:
        name:
          type: string
          example: Capa Celular Samsung
        description:
          type: string
          example: Capa de celular Samsung A22
        slug:
          type: string
          example: capa-celular-samsung
        unitPrice:
          type: number
          example: 19.99
        stockQuantity:
          type: integer
          example: 100
        category:
              type: string
              example: 63eaea653f54b54de60123bc
    Create-product-response:
      type: object
      allOf:
        - type: object
          properties:
            _id:
              type: string
              example: 63eaea823f54b54de60123be
        - $ref: "#/components/schemas/Create-product" 
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    Product-validation-errors: 
      type: array
      items:
        type: string
        example: "Name must start with a letter"
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
