openapi: 3.0.3
info:
  title: Ecomm - Account
  description: API to create, update and search the accounts of the Account API 
  version: 0.0.1
servers:
  - url: http://localhost:3000
    description: API Gateway
  - url: http://localhost:3001
    description: The service direct address(does not authenticate)
paths:
  /api/accounts:
    get:
      summary: Returns users
      security:
        - BearerAuth: []
      description: Returns all the existing users
      responses: 
        200: 
          description: Success!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Accounts"
        401:
          $ref: "#/components/responses/Unauthorized"
  /api/accounts/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
    get:
      summary: Searches for an user
      description: Searches for a specific user using its ID as a parameter
      responses:
        200:
          description: Success!
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Account"
        404:
          $ref: "#/components/responses/NotFound"
  /api/accounts/login:
    post:
      summary: Admin login
      description: Receives an email and a password to authenticate the user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Account-Login"
      responses: 
        204:
          description: Ok
          headers:
            authorization:
              schema:
                type: string
              description: The JWT to be used for authentication.
  /api/admin/accounts/logout:
    get:
      summary: Admin logout
      security:
        - BearerAuth: []
      description: Receives the authentication token by headers and logout the token
      responses:
        204:
          description: Ok
        401:
          $ref: "#/components/responses/Unauthorized"
  /api/admin/accounts:
    post:
      summary: Creates a new user
      security:
        - BearerAuth: []
      description: Receives a new user and saves it in the database
      requestBody:
        content:
          application/json:
            schema:   
              $ref: "#/components/schemas/Create-Account"
      responses:
        201: 
          description: User successfully created!
        401:
          $ref: "#/components/responses/Unauthorized"
  /api/admin/accounts/{id}:
    parameters:
    - name: id
      in: path
      schema:
        type: string
      required: true
    put:
      summary: Updates an user
      security:
        - BearerAuth: []
      description: Updates an existing user user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Create-Account"
      responses:
        200:
          description: User successfully updated!
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
    delete:
      summary: Deletes an user.
      security:
        - BearerAuth: []
      description: Deletes an user using its ID.
      responses: 
        200:
          description: User successfully deleted!
        401:
          $ref: "#/components/responses/Unauthorized"
        404:
          $ref: "#/components/responses/NotFound"
components:
  schemas:
    Error:
      type: object
      properties:
        message:
          type: string
          example: An error has ocurred
    Create-Account:
      type: object
      properties:
        name: 
          type: string
          example: John Doe
        email: 
          type: string
          example: johndoe@example.com
        password: 
          type: string
          example: John123!
        cpf: 
          type: string
          example: 12345678912
        phone: 
          type: string
          example: 51999999999
        address:
          type: object
          properties:
            street:
              type: string
              example: Rua bonita
            number:
              type: string
              example: 100
            complement:
              type: string
              example: casa
            cep:
              type: string
              example: 10000100
            city:
              type: string
              example: Exemplo
            uf:
              type: string
              example: SC
    Account: 
      type: object
      allOf:
        - type: object
          properties:
            id:
              type: string
        - $ref: "#/components/schemas/Create-Account"
    Accounts:
      type: array
      items:
       $ref: "#/components/schemas/Account"
    Account-Login:
      type: object
      properties:
        email: 
          type: string
          example: johndoe@example.com
        password:
          type: string
          example: John123!
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'


